---
layout: post
title:  [Rule.1-2] High Performance Web Sites
tags: self-study
categories: book-webPerformance
---

#### High Performance WEB    

#### Rule.5 Put Style Sheet on top     

Rule 5와 6는 Style Sheet 및 Js 파일들을 위에 혹은 밑에 두라는 말로 시작합니다. HTML을 배울 땐, 이미 다들 Style Sheet를 위에 두셧고, Js는 밑에 두셧기에 큰 고민없이 사용만 해왔었습니다.    

> 이번 Rule을 통해 왜 Style Sheet를 밑에 두는지 학습할 수 있습니다.   

책에서는 Style Sheet를 아래둘 경우, 로딩 시 `백색화면`이 나타날 수 있다고 합니다. 여기서 백색화면이란 아무것도 표시되지 않은 화면을 의미합니다.  

1-2초 동안 잠깐 빈페이지(이하 백색화면)가 나오는건 큰 문제가 없다고 생각 할 수 있습니다. 하지만 `사용자`는 그 잠깐의 백색화면에 불만족을 느끼고 이탈하게 됩니다. 때문에 백색화면은 피해하며, 사용자가 현재 페이지가 로딩되고 있음을 알 수있게 점진적으로 페이지를 보여줘야합니다.     

#### UX 관련 ?   

예전 IE를 생각해보면 밑에 `프로그레스 바`가 있어서 현재 페이지가 로딩되고 있고, 현재 어디까지 로딩됐는지 알 수 있었습니다. `프로그레스 바`는 서비스관점에서 핵심기능이 아닐 수 있지만 사용자 경험으로 봤을 때 꽤나 중요한 기능입니다. 사용자가 현재 페이지가 정상적으로 동작하고 있음을 알 수 있기 때문이죠.    


제가 사용하고 있는 Chrome에서는 이러한 `프로그레스 바`가 없습니다. 다만 Tab 부분에 진행을 알리는 원형(?)만 있을 뿐이죠.    
책에서는 `프로그레스 바` 대신 `점진적 랜더링`을 사용해서 페이지가 로딩되고 있습을 보여줘야한다고 말합니다.  

여기서 `점진적 랜더링`이란 `백색화면`과는 반대로 로딩된 순서대로 페이지가 보이는 것 입니다.    

#### Style Sheet  & 점진적 랜더링   

이쯤되면 Style Sheet 의 위치와 점진적 랜더링이 무슨 관계가 있는지 의문점이 생깁니다. 이 부분은 Browser 가 DOM Tree를 어떻게 만들고, Rendering을 어떻게 진행하는지 알면 이해하기 쉬운 부분입니다.   

기본적으로 Browser는 HTML 을 파싱한 뒤, Tree형태로 구성하게 됩니다. 그 뒤 Rendering을 진행하는데 사전 작업으로 필요한 것이 CSS 파싱(?)입니다. 
즉 Rendering을 하기 앞서 DOM Tree 뿐만 아니라 CSS Style 부분도 해석이 되어야 하기에 Browser는 Style Sheet를 읽기 전까지 Rendering을 하지 않습니다.   

> 자세한 부분들은 추후 정리해보도록 하겠습니다.    

때문에 Style Sheet 를 로딩하기 전, `백색 화면`이 나타나게 됩니다.    

> 이를 피하기 위해 Style Sheet를 header 부분에 두어 먼저 읽을 수 있도록 설정해야 한다고 합니다.    


이는 Browser 가 FOUC(Flash of unstyled Content) 현상을 막기 위한 것으로, CSS가 반영되지 않은 페이지를 보여주지 않기 위해서 Style 을 모두 읽은 후, Page를 보여준다고 합니다.   

> 브라우저마다 FOUC를 막을 수도, 막지 않을 수도 있다고 합니다 ..


#### 마치며   

책의 내용을 어느정도 요약하고, 이해한 걸 토대로 적다보니 사실과는 조금 다를 수 있습니다 ...  


2017 .12 .20
